#include <iostream>
#include <cmath>
#include <sstream>
#include <stdio.h>
#include <array>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <fstream>
#include <conio.h>

using namespace std;

clock_t start, stop;
long long int compares, switches;
const int genMin = 0;
const int genMax = 10000;
int arraySize = 10;
const bool print = 0;
const int tests = 10;
bool keyb = 0;
bool error = 0;

fstream file;

struct Tree {
	Tree* parent;
	Tree* left;
	Tree* right;
	int value;
	int bf;
	int h;
};

void updateBF(Tree*& node) {
	if (node) {
		int l_c = 0;
		int r_c = 0;
		if (node->left) {
			l_c = node->left->h;
		}
		if (node->right) {
			r_c = node->right->h;
		}
		node->bf = abs(l_c - r_c);
		updateBF(node->left);
		updateBF(node->right);
	}
}

int updateHeight(Tree*& node) {
	if (!node) {
		return 0;
	}
	else {
		int left_h = updateHeight(node->left);
		int right_h = updateHeight(node->right);
		if (right_h > left_h) {
			node->h = right_h + 1;
		}
		else {
			node->h = left_h + 1;
		}
	}
}

void PreOrder(Tree* node) {
	if (node) {
		cout << node->value << "   ";
		PreOrder(node->left);
		PreOrder(node->right);
	}
}

void InOrder(Tree* node) {
	if (node) {
		InOrder(node->left);
		cout << node->value << " ";
		InOrder(node->right);
	}
}

void delTreePostOrder(Tree*& node) {
	if (node->left) {
		delTreePostOrder(node->left);
	}
	if (node->right) {
		delTreePostOrder(node->right);
	}
	delete node;
}

Tree* deleteTree(Tree*& node, int value) {
	Tree* root = node;
	if (node->value == value) {
		if (!(node->left || node->right)) {
			root = NULL;
			delete node;
			return root;
		}
		else if (node->left && !node->right) {
			root = node->left;
			root->parent = root;
			delete node;
			return root;
		}
		else if (node->right && !node->left) {
			root = node->right;
			root->parent = root;
			delete node;
			return root;
		}
	}
	while (node) {
		if (value > node->value) {
			node = node->right;
		}
		else if (value < node->value) {
			node = node->left;
		}
		else {
			break;
		}
	}

	if (node->left == NULL && node->right == NULL) {
		if (node->parent->left != NULL && node->parent->left->value == node->value) {
			node->parent->left = NULL;
		}
		else {
			node->parent->right = NULL;
		}
		delete node;
	}

	else if (node->left != NULL && node->right == NULL) {
		if (node->parent->left != NULL && node->parent->left->value == node->value) {
			node->parent->left = node->left;
			node->left->parent = node->parent;
		}
		else {
			node->parent->right = node->left;
			node->left->parent = node->parent;
		}
		delete node;
	}
	else if (node->left == NULL && node->right != NULL) {
		if (node->parent->left != NULL && node->parent->left->value == node->value) {
			node->parent->left = node->right;
			node->right->parent = node->parent;
		}
		else {
			node->parent->right = node->right;
			node->right->parent = node->parent;
		}
		delete node;
	}

	else {
		Tree* tmp = node;
		node = node->right;
		while (node->left) {
			node = node->left;
		}
		tmp->value = node->value;
		if (node->left == NULL && node->right == NULL) {
			if (node->parent->left != NULL && node->parent->left->value == node->value) {
				node->parent->left = NULL;
			}
			else {
				node->parent->right = NULL;
			}
			delete node;
		}
		else if (node->left != NULL && node->right == NULL) {
			if (node->parent->left != NULL && node->parent->left->value == node->value) {
				node->parent->left = node->left;
				node->left->parent = node->parent;
			}
			else {
				node->parent->right = node->left;
				node->left->parent = node->parent;
			}
			delete node;
		}
		else if (node->left == NULL && node->right != NULL) {
			if (node->parent->left != NULL && node->parent->left->value == node->value) {
				node->parent->left = node->right;
				node->right->parent = node->parent;
			}
			else {
				node->parent->right = node->right;
				node->right->parent = node->parent;
			}
			delete node;
		}
	}

	return root;
}

Tree* bfFind(Tree* root) {
	if (root && root->bf <= 1) {
		bfFind(root->left);
		bfFind(root->right);
	}
	else {
		return root;
	}
}

bool isBalanced(Tree* root) {
	if (root && root->bf <= 1) {
		bfFind(root->left);
		bfFind(root->right);
	}
	else if (root && root->bf > 1) {
		return false;
	}
}

void findMax(Tree* node, int& max) {
	if (node) {
		max = node->value;
		cout << " -> " << max;
		findMax(node->right, max);
	}
}

void findMin(Tree* node, int& min) {
	if (node) {
		min = node->value;
		cout << " -> " << min;
		findMin(node->left, min);
	}
}

Tree* findTree(Tree* node, int value) {
	while (node && node->value != value) {
		if (value > node->value) {
			node = node->right;
		}
		else {
			node = node->left;
		}
	}
	return node;
}

void insertt(Tree*& root, int value) {
	Tree* node, *parent;
	node = new Tree;
	node->left = NULL;
	node->right = NULL;
	node->parent = NULL;
	node->value = value;
	node->bf = 0;

	parent = root;
	if (!parent) {
		root = node;
		root->parent = root;
	}
	else {
		while (true) {
			if (value <= parent->value) {
				if (!parent->left) {
					parent->left = node;
					break;
				}
				parent = parent->left;
			}
			else {
				if (!parent->right) {
					parent->right = node;
					break;
				}
				parent = parent->right;
			}
		}
	}
	node->parent = parent;
}

Tree* balance(Tree*& node) {
	Tree* root = node;
	Tree* tmp = NULL;
	do {
		tmp = bfFind(node);
		if (tmp) {
			int value, value_child;
			value = tmp->value;
			Tree* tmp_1;
			if (tmp->left && tmp->right) {
				if (tmp->left->h > tmp->right->h) {
					tmp_1 = tmp->left;
					while (tmp_1->right) {
						tmp_1 = tmp_1->right;
					}
					value_child = tmp_1->value;
					root = deleteTree(root, value_child);
					tmp->value = value_child;
					insertt(root, value);
				}
				else {
					tmp_1 = tmp->right;
					while (tmp_1->left) {
						tmp_1 = tmp_1->left;
					}
					value_child = tmp_1->value;
					root = deleteTree(root, value_child);
					tmp->value = value_child;
					insertt(root, value);
				}
			}
			else if (tmp->left && !tmp->right) {
				tmp_1 = tmp->left;
				while (tmp_1->right) {
					tmp_1 = tmp_1->right;
				}
				value_child = tmp_1->value;
				root = deleteTree(root, value_child);
				tmp->value = value_child;
				insertt(root, value);
			}
			else if (!tmp->left && tmp->right) {
				tmp_1 = tmp->right;
				while (tmp_1->left) {
					tmp_1 = tmp_1->left;
				}
				value_child = tmp_1->value;
				root = deleteTree(root, value_child);
				tmp->value = value_child;
				insertt(root, value);
			}
			updateHeight(root);
			updateBF(root);
		}
	} while (tmp != NULL);


	return root;
}

void makeAVL(int* tab, int first, int last, Tree*& root) {
	int index = (last + first) / 2;
	if (last >= first) {
		insertt(root, tab[index]);
		makeAVL(tab, first, index - 1, root);
		makeAVL(tab, index + 1, last, root);
	}
}

void insertionSort(int arr[])
{
	int i, key, j;
	for (i = 1; i < arraySize; i++)
	{
		key = arr[i];
		j = i - 1;
		while (j >= 0 && arr[j] > key)
		{
			arr[j + 1] = arr[j];
			j = j - 1;
		}
		arr[j + 1] = key;
	}
}

int isNumber(string thing) {
	for (int i = 0; i < thing.length(); i++) {
		if (thing[i] != 45 && (thing[i] < 48 || thing[i]>57))
			return 0;
	}
	return 1;
}

int checkFile() {
	string nr;
	if (!file.good()) {
		cout << "Brak pliku data.txt" << endl;
		return 0;
	}

	for (int i = 0; true; i++) {
		file >> nr;

		if (file.eof()) {
			return i;
		}

		if (!isNumber(nr)) {
			return 0;
		}
	}
}

void loadFile(int tab[]) {
	int fileSize = checkFile();
	//cout<<fileSize<<endl;
	if (fileSize) {
		//fclose(file);
		fstream f;
		f.open("data.txt");
		for (int i = 0; i < arraySize; i++) {
			f >> tab[i];
			//fscanf(f, "%d\n", &numbers[i]);
		}
		//fclose(f);
	}
	else {
		error++;
		cout << "dane nieprawidlowe" << endl;
	}
}

void keyboard(int tab[]) {
	for (int i = 0; i < arraySize; i++) {
		string z;
		cin >> z;
		if (isNumber(z) == 1) {
			stringstream geek(z);
			int x;
			geek >> x;
			tab[i] = x;
		}
		else {
			error++;
			printf("Niepoprawna wartosc wprowadzona");
			break;
		}
	}
}

void generateArray(int* tab, int s, int e) {
	for (int i = 0; i < arraySize; i++) {
		tab[i] = (rand() % (e - s) + s);
	}
}

void formArray(int tab[], int s, int e, int type) {
	if (type == 0) {
		generateArray(tab, s, e);
	}
	if (type == 1) {
		for (int i = 0; i < arraySize; i++) {
			tab[i] = arraySize - i - 1;
		}
	}
}

Tree* makeBST(Tree*& root, int tab[]) {
	for (int i = 0; i < arraySize; i++) {
		insertt(root, tab[i]);
	}
	return root;
}

void printArray(int tab[]) {
	if (print) {
		for (int i = 0; i < arraySize; i++) {
			cout << tab[i] << " ";
		}
		cout << endl;
	}
}

bool menu(int& choice, int& action, int& tree) {

	cout << "Typ drzewa" << endl;
	cout << "1. BST" << endl;
	cout << "2. AVL" << endl;
	tree = _getch() - 48;
	system("CLS");
	if (tree > 2 || tree <= 0)
		return 1;


	cout << "1. Generuj liczby" << endl;
	cout << "2. Wczytaj liczby z pliku" << endl;
	cout << "3. Wczytaj liczby z klawiatury" << endl;
	choice = (_getch() - 48) * 10;
	system("CLS");
	if (choice > 30 || choice <= 0)
		return 1;

	if (choice == 10) {
		cout << "Typ generowanej tablicy" << endl;
		cout << "1. Randomowa" << endl;
		cout << "2. Malejaca" << endl;
		choice += (_getch() - 49);
		system("CLS");
		if (choice % 10 > 1 || choice % 10 < 0)
			return 1;
	}

	choice = 12;

	cout << "Wielkosc drzewa: ";
	cin >> arraySize;
	if (arraySize <= 0)
		return 1;
	system("CLS");

	cout << "Dzialanie" << endl;
	cout << "1. Wyszukiwanie najwiekszego elementu" << endl;
	cout << "2. Wyszukiwanie najmniejszego elementu" << endl;
	cout << "3. Usuniecie elementu" << endl;
	cout << "4. Wyswietlanie in-order" << endl;
	cout << "5. Wyswietlanie pre-order" << endl;
	cout << "6. Usuniecie drzewa post-order" << endl;
	cout << "7. Wypisanie poddrzewa pre-order" << endl;
	cout << "8. Rownowazenie drzewa" << endl;
	action = _getch() - 48;
	system("CLS");

}

int head() {
	system("CLS");
	int choice = 1;
	int action = 1;
	int tree = 1;
	int x;
	if (menu(choice, action, tree) || action > 8 || action < 0)
		return 1;
	//choice = 12;
	int *tab = new int[arraySize];
	//int tab[10] = { -1,-2,-3,-4,5,6,7,8,9,0 };
	Tree* root = NULL;

	keyb = (choice / 10 == 3);

	if (choice / 10 == 1) {
		formArray(tab, genMin, genMax, choice % 10);
	}
	if (choice / 10 == 2) {
		file.open("data.txt");
		loadFile(tab);
	}
	if (choice / 10 == 3) {
		keyboard(tab);
	}

	printArray(tab);

	if (tree == 1) {
		root = makeBST(root, tab);
		updateHeight(root);
		updateBF(root);
	}
	else {
		insertionSort(tab);
		makeAVL(tab, 0, arraySize - 1, root);
		updateHeight(root);
		updateBF(root);
	}
	if (print) {
		PreOrder(root);
		cout << endl << endl;
	}

	if (!error) {
		switch (action)
		{
		case 1:
			findMax(root, x);
			cout << endl << "Najwiekszy element: " << x << endl;
			break;
		case 2:
			findMin(root, x);
			cout << endl << "Najmniejszy element: " << x << endl;
			break;
		case 3:
			cout << endl << "Usuwany element: ";
			cin >> x;
			root = deleteTree(root, x);
			PreOrder(root);
			break;
		case 4:
			InOrder(root);
			break;
		case 5:
			PreOrder(root);
			break;
		case 6:
			delTreePostOrder(root);
			break;
		case 7:
			cout << "Klucz poddrzewa: ";
			cin >> x;
			PreOrder(findTree(root, x));
			break;
		case 8:
			root = balance(root);
			PreOrder(root);
			break;
		}
	}
	x = _getch();
	if (x == 13) {
		return 1;
	}
	return 0;
}

int main()
{
	srand(time(NULL));
	while (head()) {}

	return 0;
}