#include <iostream>
#include <vector>
#include <stack>
#include <algorithm>
#include <fstream>
#include <sstream>
#include <ctime>

using namespace std;

stack<int> stos;
struct Edge {
	int first;
	int last;
};
//GENERAL
int  loadData(Edge* arr, int cnt) {
	int f, l;
	int max = arr[0].first;
	if (max < arr[0].last) {
		max = arr[0].last;
	}
	cout << "Podaj wszystkie krawedzie\n";
	for (int i = 0; i < cnt; i++) {
		cin >> f >> l;
		arr[i].first = f;
		arr[i].last = l;
		if (max < arr[i].first) {
			max = arr[i].first;
		}
		if (max < arr[i].last) {
			max = arr[i].last;
		}
	}

	return max;
}

void printEdges(Edge* arr, int cnt) {
	for (int i = 0; i < cnt; i++) {
		cout << i + 1 << ": " << arr[i].first << "->" << arr[i].last << endl;;

	}
}

Edge* generateEdges(int v) {
	long long n = (v * (v - 1)) / 4;
	Edge* edges = new Edge[n];
	long long cnt = 0;
	for (int i = 0; i < v; i++) {
		for (int j = i + 1; j < v; j++) {
			if (cnt < n) {
				edges[cnt].first = i + 1;
				edges[cnt].last = j + 1;
				cnt++;
			}
			else {
				break;
			}
		}
		if (cnt >= n) {
			break;
		}
	}
	return edges;
}
//-------------------------------------------

int** create_matrix(int cnt, bool* visited) {
	int** tab = new int*[cnt];
	int isEdge;

	for (int i = 0; i < cnt; i++) {
		tab[i] = new int[cnt];
		for (int j = 0; j < cnt; j++) {
			cin >> isEdge;
			tab[i][j] = isEdge;
		}
	}

	for (int i = 0; i < cnt; i++)
		visited[i] = false;

	return tab;
}

void printMatrix(int** tab, int cnt) {
	for (int i = 0; i < cnt; i++) {
		for (int j = 0; j < cnt; j++) {
			cout << int(tab[i][j]) << " ";
		}
		cout << endl;
	}
}
int findRow(int** arr, int cnt, bool* visited) {
	bool noEdge = false;
	for (int i = 0; i < cnt; i++) {
		noEdge = false;
		for (int j = 0; j < cnt; j++) {
			if (visited[i] == false && arr[i][j] == -1) {
				noEdge = true;
			}
		}
		if (!noEdge && visited[i] == false) {
			return i;
		}
	}
	return -1;
}

void clearAll(int** arr, int cnt, int idx) {
	for (int i = 0; i < cnt; i++) {
		arr[idx][i] = 0;
	}
	for (int i = 0; i < cnt; i++) {
		arr[i][idx] = 0;
	}
}
vector<int> MatrixDEL(int** arr, int cnt, bool* visited) {
	vector<int> answer;
	int deleted = 0;
	int index;
	while (deleted < cnt) {
		index = findRow(arr, cnt, visited);

		if (index != -1) {
			clearAll(arr, cnt, index);
			answer.push_back(index + 1);
			visited[index] = true;
			deleted++;
		}
	}

	return answer;
}
void printVec(vector<int> tab, int cnt) {
	for (int i = 0; i < cnt; i++) {
		cout << tab[i] << " ";
	}
}

void printVecDFS(vector<int> tab, int cnt) {
	for (int i = cnt - 1; i >= 0; i--) {
		cout << tab[i] << " ";
	}
}

bool isTherePath(int** arr, int cnt, int idx, bool* visited) {
	for (int i = 0; i < cnt; i++) {
		if (arr[idx][i] == 1 && visited[i] == false) {
			return true;
		}
	}
	return false;
}
int path(int** arr, int cnt, int idx, bool* visited) {
	bool flag = false;
	int tmp = idx;
	while (!flag) {
		tmp = idx;
		for (int i = 0; i < cnt; i++) {
			if (arr[idx][i] == 1 && visited[i] == false) {
				tmp = i;
				break;
			}
		}
		if (isTherePath(arr, cnt, idx, visited) == false)
			return tmp;

		else {
			stos.push(idx);
			idx = tmp;
		}
	}
}
//DFS
vector<int> MatrixDFS(int** arr, int cnt, bool* visited) {
	vector<int> answer;
	int deleted = 0;
	int index = findRow(arr, cnt, visited);

	while (deleted < cnt) {
		if (!isTherePath(arr, cnt, index, visited) && stos.empty()) {
			index = findRow(arr, cnt, visited);
			int odp = path(arr, cnt, index, visited);
			clearAll(arr, cnt, odp);
			answer.push_back(odp + 1);
			visited[odp] = true;
			deleted++;
		}
		else {
			int odp = path(arr, cnt, index, visited);
			clearAll(arr, cnt, odp);
			answer.push_back(odp + 1);
			visited[odp] = true;
			deleted++;
			if (!stos.empty()) {
				index = stos.top();
				stos.pop();
			}
		}
	}
	return answer;
}

int** generateMatrix(Edge* edges, int len, int cnt, bool* visited) {
	int** arr = new int*[len];
	for (int i = 0; i < len; i++) {
		arr[i] = new int[len];
		for (int j = 0; j < len; j++) {
			arr[i][j] = 0;
		}
	}

	for (int i = 0; i < cnt; i++) {
		if (arr[edges[i].first - 1][edges[i].last - 1] == 0) {
			arr[edges[i].first - 1][edges[i].last - 1] = 1;
		}
		else {
			cout << "Graf cykliczny nie mozna przeprowadzic zadnych operacji\n";
			exit(0);
		}
		if (arr[edges[i].last - 1][edges[i].first - 1] == 0) {
			arr[edges[i].last - 1][edges[i].first - 1] = -1;
		}
		else {
			cout << "Graf cykliczny nie mozna przeprowadzic zadnych operacji\n";
			exit(0);
		}
	}

	for (int i = 0; i < len; i++)
		visited[i] = false;

	return arr;
}

//-------------------------------------------
//LISTA NASTEPNIKOW
struct List {
	vector<int> next;
	bool isZero;
	bool visited;
};

int checkifZero(List* arr, int len) {
	//number
	for (int i = 0; i < len; i++) {
		// arr
		if (arr[i].visited == false) {
			bool flag = true;
			for (int j = 0; j < len; j++) {
				// next of arr
				if (arr[j].visited == false) {
					for (int x = 0; x < arr[j].next.size(); x++) {
						if ((i + 1) == arr[j].next[x]) {
							flag = false;
						}
					}
				}
			}
			if (flag == true) {
				return i;
			}
		}
	}
	return -1;
}
void printZero(List* arr, int len) {
	for (int i = 0; i < len; i++) {
		cout << arr[i].isZero << " ";
	}
	cout << endl;
}
void createList(Edge* arr, int cnt, int len, List* tab) {
	for (int i = 0; i < len; i++) {
		for (int j = 0; j < cnt; j++) {
			if (arr[j].first == i + 1) {
				tab[i].next.push_back(arr[j].last);
			}
		}
		tab[i].visited = false;
		sort(tab[i].next.begin(), tab[i].next.end());
	}
}

void printList(List* tab, int cnt) {
	for (int i = 0; i < cnt; i++) {

		for (int j = 0; j < tab[i].next.size(); j++) {
			cout << tab[i].next[j] << "->";
		}
		cout << endl;
	}
}

int findElement(List* arr, int cnt) {
	for (int i = 0; i < cnt; i++) {
		if (arr[i].isZero == true && arr[i].visited == false) {
			return i;
		}
	}
}

int checkIfOneExistsDFS(List* arr, int idx) {
	for (int i = 0; i < arr[idx].next.size(); i++) {
		if (arr[arr[idx].next[i] - 1].visited == false) {
			return arr[idx].next[i] - 1;
		}
	}
	return -1;
}

vector<int> listDel(List*& arr, int cnt) {
	stack<int> stack;
	vector<int> answer;
	int deleted = 0;
	int index;
	int j;
	while (deleted < cnt) {
		index = checkifZero(arr, cnt);
		arr[index].visited = true;
		answer.push_back(index + 1);
		deleted++;
	}
	return answer;
}

vector<int> listDFS(List* arr, int cnt) {
	stack<int> stack;
	vector<int> answer;
	int deleted = 0;
	int index = checkifZero(arr, cnt);
	int j;
	while (deleted < cnt) {
		j = checkIfOneExistsDFS(arr, index);
		if (j != -1) {
			stack.push(index);
			index = j;
		}

		else {
			//when stack is empty and we had to repick new a node
			if (stack.empty()) {
				index = checkifZero(arr, cnt);
				j = checkIfOneExistsDFS(arr, index);
				while (j != -1) {
					stack.push(index);
					index = j;
					j = checkIfOneExistsDFS(arr, index);
				}
			}
			answer.push_back(index + 1);
			arr[index].visited = true;
			deleted++;
			if (!stack.empty()) {
				index = stack.top();
				stack.pop();
			}
		}
	}

	return answer;
}

void setBool(bool* visited, int v) {
	for (int i = 0; i < v; i++) {
		visited[i] = false;
	}
}

bool isTherePathGraph(int** arr, int cnt, int idx, bool* visited) {
	if (arr[idx][cnt] != 0 && visited[idx] == false) {
		return true;
	}
	else {
		return false;
	}
}

int pathGraph(int** arr, int cnt, int idx, bool* visited) {
	int tmp = idx;
	while (true) {
		tmp = idx;
		if (arr[idx][cnt] != 0 && visited[idx] == false) {
			tmp = arr[idx][cnt] - 1;
		}
		if (isTherePathGraph(arr, cnt, idx, visited) == false)
			return tmp;

		else {
			stos.push(idx);
			idx = tmp;
		}
	}
}

bool acyclic(Edge* edges, int v, int e) {
	bool* visited = new bool[v];
	setBool(visited, v);
	int** arr = generateMatrix(edges, v, e, visited);
	vector<int> answer;
	int deleted = 0;
	int index;
	while (deleted < v) {
		index = findRow(arr, v, visited);
		if (index == -1) {
			return false;
		}
		clearAll(arr, v, index);
		answer.push_back(index + 1);
		visited[index] = true;
		deleted++;

	}

	return true;
}

//EULER
int findVertex(int vertex, List* list) {
    if (list[vertex].next.size() != 0) {
        return list[vertex].next[0] - 1;
    }
    return -1;
}
 
void deleteNext(List*& list, int first, int last) {
    for (int i = 0; i < list[first].next.size(); i++) {
        if (list[first].next[i] == last + 1) {
            list[first].next.erase(list[first].next.begin() + i);
        }
    }
}
 
void EulerDirected(List*& list, int e, bool* visited) {
    int index = 0;
    int deleted = 0;
    int prev = -2222;
    while (deleted < e) {
        do {
            //cout << "Na poczatku petli prev:" << prev+1 << " index: " << index+1 << endl;
            prev = index;
            //cout << "Po zmianie prev:" << prev+1 << " index: " << index+1 << endl;
            index = findVertex(index, list);
            if (index != -1) {
                //cout << "stos:" << prev + 1 << endl;
                stos.push(prev);
                deleteNext(list, prev, index);
            }
            //cout << "Na koncu petli prev:" << prev+1 << " index: " << index+1 << endl;
        } while (index != -1);
 
        answers.push_back(prev + 1);
        deleted++;
        if (!stos.empty()) {
            index = stos.top();
            stos.pop();
        }
    }
    answers.push_back(answers[0]);
}
 
int findVertexTab(int vertex, int** tab, int v) {
    for (int i = 0; i < v; i++) {
        if (tab[vertex][i]) {
            return i;
        }
    }
 
    return -1;
}
 
void deleteNextTab(int** tab, int first, int last) {
    tab[first][last] = 0;
    tab[last][first] = 0;
}
 
void EulerUndirected(int** tab, int e, bool* visited, int v) {
    int index = 0;
    int deleted = 0;
    int prev = -2222;
    while (deleted < e) {
        do {
            //cout << "Na poczatku petli prev:" << prev+1 << " index: " << index+1 << endl;
            prev = index;
            //cout << "Po zmianie prev:" << prev+1 << " index: " << index+1 << endl;
            index = findVertexTab(index, tab, v);
            if (index != -1) {
                //cout << "stos:" << prev + 1 << endl;
                stos.push(prev);
                deleteNextTab(tab, index, prev);
            }
            //cout << "Na koncu petli prev:" << prev+1 << " index: " << index+1 << endl;
        } while (index != -1);
 
        answers.push_back(prev + 1);
        deleted++;
        if (!stos.empty()) {
            index = stos.top();
            stos.pop();
        }
    }
    answers.push_back(answers[0]);
}
 
//HAMILTON
bool Hamiltonian(List* list, int v, bool* visited, int& deleted, int n) {
    visited[v] = true;
    deleted++;
    //cout << "N:" << n << endl;
    int successor = v;
    for (int i = 0; i < list[v].next.size(); i++) {
        int successor = list[v].next[i] - 1;
        //cout << "successor: " << successor + 1 << "v: " << v + 1 << endl;
        //printVec(answers);
        if (successor == 0 && deleted == n) {
            answers.push_back(v + 1);
            return true;
        }
        if (!visited[successor]) {
            if (Hamiltonian(list, successor, visited, deleted, n)) {
                answers.push_back(v + 1);
                return true;
            }
        }
 
    }
    visited[v] = false;
    deleted--;
    return false;
}
 
bool Hcycle(List* list, int v, bool* visited, int n) {
    int deleted = 0;
    int start = 0;
    answers.push_back(start + 1);
    return Hamiltonian(list, start, visited, deleted, n);
}
 
bool HamiltonianUndirected(int** matrix, int v, bool* visited, int& deleted, int n) {
    visited[v] = true;
    deleted++;
    int successor = v;
    for (int i = 0; i < n; i++) {
        if (matrix[v][i] == 1) {
            int successor = i;
            //cout << "successor: " << successor + 1 << "v: " << v + 1 << endl;
            //printVec(answers);
            if (successor == 0 && deleted == n) {
                answers.push_back(v + 1);
                return true;
            }
            if (!visited[successor]) {
                if (HamiltonianUndirected(matrix, successor, visited, deleted, n)) {
                    answers.push_back(v + 1);
                    return true;
                }
            }
        }
    }
    visited[v] = false;
    deleted--;
    return false;
}
 
bool HcycleUndirected(int** list, int v, bool* visited, int n) {
    int deleted = 0;
    int start = 0;
    answers.push_back(start + 1);
    return HamiltonianUndirected(list, start, visited, deleted, n);
}//COMPLETED
//-------------------------------------------

//Interface
void checkIfCorrect(int& choice, int low, int high) {
	while (!(choice >= low && choice <= high)) {
		cout << "Zly input\n";
		cout << "Podaj opcje jeszcze raz: \n";
		cin >> choice;
	}
}
int menu() {
	int choice;
	cout << "Co chcesz zrobić?\n";
	cout << "1.Sortowanie topologiczne wszerz dla macierzy sasiedztwa\n";
	cout << "2.Sortowanie topologiczne w glab dla macierzy sasiedztwa\n";
	cout << "3.Sortowanie topologiczne wszerz dla listy nastepnikow\n";
	cout << "4.Sortowanie topologiczne w glab dla listy nastepnikow\n";
  cout << "5.Znalezc cykl Eulera\n";
  cout << "6.Znalezc cykl Hamiltona\n"; 
  cout << "7.Wyjdz\n";
	cout << "Twoja odpowiedz: ";
	cin >> choice;
	checkIfCorrect(choice, 1, 7);

	return choice;
}

bool checkInput(string input) {


	for (int i = 0; i < input.length(); i++) {
		if (!((input[i] >= 48 && input[i] <= 57)))
			return false;

	}

	return true;
}

int convertToInt(string tmp) {
	stringstream stream(tmp);
	int my_int;
	stream >> my_int;
	return my_int;
}


void Execute(int choice, Edge* edges, int v, int e, bool* visited) {
	clock_t start, stop;
	vector<int> answers;
	int** arr;
	List* tab;
	ListP* prev;
	List* next;
	ListI* inc;
	switch (choice) {
	case 1:
		cout << v << endl;
		start = clock();
		arr = generateMatrix(edges, v, e, visited);
		stop = clock();

		start = clock();
		answers = MatrixDFS(arr, v, visited);
		stop = clock();
		cout << "Czas sortowania:" << (double)(stop - start) / CLOCKS_PER_SEC << "s." << endl;
		//printVecDFS(answers, v);
		break;
	case 2:
		cout << v << endl;
		start = clock();
		arr = generateMatrix(edges, v, e, visited);
		stop = clock();
		start = clock();
		answers = MatrixDEL(arr, v, visited);
		stop = clock();
		cout << "Czas sortowania:" << (double)(stop - start) / CLOCKS_PER_SEC << "s." << endl;
		//printVec(answers, v);
		break;
	case 3:
		tab = new List[v];
		start = clock();
		createList(edges, e, v, tab);
		checkifZero(tab, v);
		stop = clock();

		start = clock();
		answers = listDFS(tab, v);
		stop = clock();
		cout << "Czas sortowania:" << (double)(stop - start) / CLOCKS_PER_SEC << "s." << endl;
		//printVecDFS(answers, v);
		break;
	case 4:
		tab = new List[v];
		start = clock();
		createList(edges, e, v, tab);
		checkifZero(tab, v);
		stop = clock();

		start = clock();
		answers = listDel(tab, v);
		stop = clock();
		cout << "Czas sortowania:" << (double)(stop - start) / CLOCKS_PER_SEC << "s." << endl;
		//printVec(answers, v);
		break;
 case 5:
	  matrix = generateMatrix(arr, v, e, visited);
    //printMatrix(matrix, v);
    list = new List[v];
    inc = new ListI[v];
    createListI(arr, e, v, inc);
    createList(arr, e, v, list);
    if (!isSpojny(inc, v) || !inEven(matrix,v)) {
          cout << "Cykl Eulera nie istnieje." << endl;
          _getch();
          return;
       }
        cout << "Cykl Eulera istnieje." << endl;
        EulerUndirected(matrix, e, visited, v);
        printVec(answers);
       } 
    break;
    case 6:
    matrix = generateMatrix(arr, v, e, visited);
    //printMatrix(matrix, v);
    if (HcycleUndirected(matrix, 0, visited, v)) {
          cout << "Cykl Hamiltona istnieje." << endl;
          printVec(answers);
       }
    else {
          cout << "Cykl Hamiltona nie istnieje." << endl;
            }	
  default:
		break;
	}

}
//-------------------------------------------


int main()
{
	int choice, ans;
	int e, v;
	Edge* arr;
	bool* visited;
	string nazwa;
	double time;
	cout << "Jak chcesz podac dane\n";
	cout << "1. Klawiatura\n";
	cout << "2. Wygenerowac\n";
	cout << "3. Wyjscie\n";
	cout << "Podaj opcje: ";
	cin >> choice;
	checkIfCorrect(choice, 1, 3);
	switch (choice) {
	case 1:
		cout << "Podaj ilosc krawedzi:";
		cin >> e;
		arr = new Edge[e];
		v = loadData(arr, e);
		visited = new bool[v];
		if (!acyclic(arr, v, e)) {
			cout << "Graf cykliczny nie mozna przeprowadzic zadnych operacji";
			exit(0);
		}
		ans = menu();
		Execute(ans, arr, v, e, visited);
		break;
	case 2:
		cout << "Podaj ilosc wierzcholkow:";
		cin >> v;
		e = (v * (v - 1)) / 4;
		arr = generateEdges(v);
		visited = new bool[v];
		if (!acyclic(arr, v, e)) {
			cout << "Graf cykliczny nie mozna przeprowadzic zadnych operacji";
			exit(0);
		}
		ans = menu();
		Execute(ans, arr, v, e, visited);
		break;
	default:
		exit(0);
		break;
	}

	return 0;
}
